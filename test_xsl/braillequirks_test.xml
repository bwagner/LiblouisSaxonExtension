<?xml version='1.0' encoding='utf-8'?>

<!-- Copyright (C) 2010 Swiss Library for the Blind, Visually Impaired and Print Disabled -->

<!-- This file is part of LiblouisSaxonExtension. -->

<!-- LiblouisSaxonExtension is free software: you can redistribute it -->
<!-- and/or modify it under the terms of the GNU Lesser General Public -->
<!-- License as published by the Free Software Foundation, either -->
<!-- version 3 of the License, or (at your option) any later version. -->

<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU -->
<!-- Lesser General Public License for more details. -->

<!-- You should have received a copy of the GNU Lesser General Public -->
<!-- License along with this program. If not, see -->
<!-- <http://www.gnu.org/licenses/>. -->

<!DOCTYPE utfx:tests PUBLIC "-//UTF-X//DTD utfx-tests 1.0//EN" "utfx_tests.dtd">
<utfx:tests xmlns:utfx="http://utfx.org/test-definition"
  xmlns:dtb="http://www.daisy.org/z3986/2005/dtbook/"
  xmlns:brl="http://www.daisy.org/z3986/2009/braille/">
  <utfx:stylesheet src="xsl/dtbook2sbsform.xsl"/>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- tests for specific constructs in the text -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <utfx:test>
    <utfx:name>test for !«</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»Ich bin Bergfahrer!«</stub>
      </utfx:source>
      <utfx:expected>(# B* B7G,R7+)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for !</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">And we look farther on!</stub>
      </utfx:source>
      <utfx:expected>+D WE LOOK F)TH7 ON+</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for <em>Italy</em></utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>Italy</dtb:em> stands the other side!</stub>
      </utfx:source>
      <utfx:expected>_IT:'Y ,]S THE OTH7 SIDE+</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for <em>Italy</em></utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Forever intervene!</stub>
      </utfx:source>
      <utfx:expected>F?EV7 *T7VCE+</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>&lt;em&gt; with previous text node ending in word</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="0"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
	  <dtb:line>foo</dtb:line>
	  <dtb:line><dtb:em>bar</dtb:em></dtb:line>
	</stub>
      </utfx:source>
      <utfx:expected>
y LINEb
 FOO
y LINEe
 
y LINEb
 _BAR
y LINEe
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for stick!!!«</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»Sun-block on a stick!!!«</stub>
      </utfx:source>
      <utfx:expected>(S/-mBLO$ ON 'A ]I$+++)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for und/oder</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Substanz und/oder deren</stub>
      </utfx:source>
      <utfx:expected>SUB]+Z U!,O D7C</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for <abbr>AM</abbr></utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:abbr>AM</dtb:abbr>- und der <dtb:abbr>FM</dtb:abbr>-Skala,</stub>
      </utfx:source>
      <utfx:expected>>AM- U R >FM-mSK:A,</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for em with subelements (http://redmine.sbszh.ch/issues/show/816) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="0"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:em><dtb:abbr>US</dtb:abbr>-Justizministerium</dtb:em>
        </stub>
      </utfx:source>
      <utfx:expected>__>US-mJUSTIZMINISTERIUM'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for whitespace swallowed with adjacing inlines (http://redmine.sbszh.ch/issues/show/818) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de"><dtb:em>Mein Mann.</dtb:em> <brl:v-form>Ihr</brl:v-form></stub>
      </utfx:source>
      <utfx:expected>__M6 MN.'. $I</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Swallow white space whith embed new lines 1</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de">Gedanken – Strich      —</stub>
      </utfx:source>
      <utfx:expected>&amp;DKC'- ]R#'-</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Swallow white space whith embed new lines 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de">Gedanken
— Strich</stub>
      </utfx:source>
      <utfx:expected>&amp;DKC'- ]R#</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Swallow white space whith embed new lines 3</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de">Gedanken
  — Strich</stub>
      </utfx:source>
      <utfx:expected>&amp;DKC'- ]R#</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Swallow white space whith embed new lines 4</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de">Gedanken
                         —         Strich</stub>
      </utfx:source>
      <utfx:expected>&amp;DKC'- ]R#</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 1 for brl:num role="measure", wenn Zeilenumbruch zwischen Zahl und Einheit steht (http://redmine.sbszh.ch/issues/show/898) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <brl:num role="measure">24 mm</brl:num>
        </stub>
      </utfx:source>
      <utfx:expected>#BD'MM</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 2 for brl:num role="measure", wenn Zeilenumbruch zwischen Zahl und Einheit steht (http://redmine.sbszh.ch/issues/show/898) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <brl:num role="measure">24 
mm</brl:num>
        </stub>
      </utfx:source>
      <utfx:expected>#BD'MM</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 3 for wenn Zeilenumbruch zwischen Zahl und Einheit steht sollte Leerzeichen getilgt werden (http://redmine.sbszh.ch/issues/show/898) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:abbr>Nr. 
25</dtb:abbr>
        </stub>
      </utfx:source>
      <utfx:expected>NR.#BE</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 1 for brl:homograph (http://redmine.sbszh.ch/issues/show/925) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Iron <brl:homograph>M<brl:separator/>an</brl:homograph></stub>
      </utfx:source>
      <utfx:expected>IRON MAN</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 2 for brl:homograph (http://redmine.sbszh.ch/issues/show/925) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Iron <brl:homograph>Ma<brl:separator/>n</brl:homograph>
        </stub>
      </utfx:source>
      <utfx:expected>IRON MAN</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test für Einzelbuchstaben mit Punkt</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">A. B. C. D. E. F. G. H. I. J.</stub>
      </utfx:source>
      <utfx:expected>A. B. 'C. D. E. F. G. H. I. J.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 2 for Apostroph (pt. 6) vor Einzelbuchstaben mit Punkt innerhalb abbr (http://redmine.sbszh.ch/issues/show/927) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:abbr>A. B. D. E. F. G. H. I. J.</dtb:abbr>
        </stub>
      </utfx:source>
      <utfx:expected>A.B.D.E.F.G.H.I.J.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 2 for Apostroph (pt. 6) erscheint zweimal bei Apostroph + Einzelbuchstabe (http://redmine.sbszh.ch/issues/show/929) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">wie geht's</stub>
      </utfx:source>
      <utfx:expected>2 G=T'S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>&lt;em&gt; innerhalb Anführungszeichen liefern falsches Resultat (http://redmine.sbszh.ch/issues/show/1004)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»<dtb:em>Test</dtb:em>«</stub>
      </utfx:source>
      <utfx:expected>(_TE])</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Problem bei Schrägstrich: Kürzungen (http://redmine.sbszh.ch/issues/show/1005)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Produktion/Test</stub>
      </utfx:source>
      <utfx:expected>QDUKTJ!,TE]</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Kursive/Fette Anführungszeichen bei brl:render="ignore" (http://redmine.sbszh.ch/issues/show/1006)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»<dtb:em brl:render="ignore">Test</dtb:em>«-Beispiel</stub>
      </utfx:source>
      <utfx:expected>(TE])-m,B,0</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Kursive/Fette Anführungszeichen bei brl:render="ignore" (http://redmine.sbszh.ch/issues/show/1006)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em brl:render="ignore">»Test«</dtb:em>-Beispiel</stub>
      </utfx:source>
      <utfx:expected>(TE])-m,B,0</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Kursive/Fette Anführungszeichen bei brl:render="ignore" (http://redmine.sbszh.ch/issues/show/1006)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">›<dtb:em brl:render="ignore">Test</dtb:em>‹-Beispiel</stub>
      </utfx:source>
      <utfx:expected>'(TE]')-m,B,0</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Kursive/Fette Anführungszeichen bei brl:render="ignore" (http://redmine.sbszh.ch/issues/show/1006)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em brl:render="ignore">›Test‹</dtb:em>-Beispiel</stub>
      </utfx:source>
      <utfx:expected>'(TE]')-m,B,0</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>"ich" innerhalb em vor Komma (http://redmine.sbszh.ch/issues/show/944)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>ich</dtb:em>, </stub>
      </utfx:source>
      <utfx:expected>_I4,</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>"ich" innerhalb em vor Klammer (http://redmine.sbszh.ch/issues/show/944)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>ich</dtb:em>) </stub>
      </utfx:source>
      <utfx:expected>_I4=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>"ich" innerhalb em vor Klammer (http://redmine.sbszh.ch/issues/show/944)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>(ich</dtb:em>) </stub>
      </utfx:source>
      <utfx:expected>_=I4=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>"mich" innerhalb em vor Klammer (http://redmine.sbszh.ch/issues/show/944)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>mich</dtb:em>) </stub>
      </utfx:source>
      <utfx:expected>_M#=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Single word mixed emphasis (em before) (http://redmine.sbszh.ch/issues/show/1007)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>Menschen</dtb:em>versuch</stub>
      </utfx:source>
      <utfx:expected>_MC5C'.V7SU4</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Single word mixed emphasis (em after)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Liebe<dtb:em>gang</dtb:em></stub>
      </utfx:source>
      <utfx:expected>L0;'_G+G</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Single word mixed emphasis (em inside)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Liebe<dtb:em>Menschen</dtb:em>versuch</stub>
      </utfx:source>
      <utfx:expected>L0;'_MC5C'.V7SU4</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Einzelbuchstaben mit Akzenten erhalten fälschlicherweise einen Pt.6 (http://redmine.sbszh.ch/issues/show/1010)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">à la carte</stub>
      </utfx:source>
      <utfx:expected>"[ LA 'C)(</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Leerschläge vor und nach Schrägstrich werden getilgt (http://redmine.sbszh.ch/issues/show/1011)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">wort / wort</stub>
      </utfx:source>
      <utfx:expected>W?T !, W?T</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Falsches Resultat bei gemischtem Bruch, wenn Zeilenumbruch vorkommt (http://redmine.sbszh.ch/issues/show/1065)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de"><brl:num role="mixed">4
                1/2</brl:num></stub>
      </utfx:source>
      <utfx:expected>#D#A;</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Check if unicode chars are eaten by liblouis</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source><stub xml:lang="de">&#x255E;</stub></utfx:source>
      <utfx:expected>'_</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Check if unicode chars are eaten by liblouis</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source><stub xml:lang="de">&#x2561;</stub></utfx:source>
      <utfx:expected>'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Quotes w/o context 1</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"> (&#x00BB;<dtb:abbr>Bsp.</dtb:abbr>!&#x00AB;</stub>
      </utfx:source>
      <utfx:expected>=(BSP.+)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Quotes w/o context 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"> (&#x00AB;<dtb:abbr>Bsp.</dtb:abbr>!&#x00BB;</stub>
      </utfx:source>
      <utfx:expected>=(BSP.+)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Quotes w/o context 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"> (&#x00AB;<dtb:abbr>Bsp.</dtb:abbr>!&#x00BB;</stub>
      </utfx:source>
      <utfx:expected>=(BSP.+)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Quotes with phone number</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"><brl:num role="phone">079 160 22 22</brl:num>&#x00BB;</stub>
      </utfx:source>
      <utfx:expected>#JGI.AFJ.BB.BB')</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Many quoted paras</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">
	  <dtb:p>«Sag mal, bist du Kommunist?»</dtb:p>
	  <dtb:p>«Nein, und schon gar nicht in sowjetischem Sinn.»</dtb:p>
	<dtb:p>«Du <dtb:em>bist</dtb:em></dtb:p>
	</stub>
      </utfx:source>
      <utfx:expected>
y P
 (SG MAL, B] DU KX/I]?(
y P
 (N6, U 5 GAR N * SOWJETI5[ S*N.)
y P
 (DU _B] 
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Many quoted paras 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">
	  <dtb:p>«Okay. Aber ich würde es auch gar nicht wissen; bin erst ein paar Jahre in den <dtb:abbr>USA</dtb:abbr>.»</dtb:p>
	  <dtb:p>Sie hatte von Anfang an den Akzent bemerkt, der den Ausländer verriet, und fragte: «Na, und woher kommst du?»</dtb:p>
	</stub>
      </utfx:source>
      <utfx:expected>y P
 (OKA'Y. A # 8E % \ GAR N W^C; B* 7] 6 PAAR JRE * E &gt;USA.)
y P
 S HE V +F+G + E AKZCT ;M7KT, R E \L@ND7 -R0T, U FR(: (NA, U WOH7 KX] DU?)
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Many quoted paras 3</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">
	  <dtb:p>»Okay. Aber ich würde es auch gar nicht wissen; bin erst ein paar Jahre in den <dtb:abbr>USA</dtb:abbr>.«</dtb:p>
	  <dtb:p>Sie hatte von Anfang an den Akzent bemerkt, der den Ausländer verriet, und fragte: »Na, und woher kommst du?«</dtb:p>
	</stub>
      </utfx:source>
      <utfx:expected>y P
 (OKA'Y. A # 8E % \ GAR N W^C; B* 7] 6 PAAR JRE * E &gt;USA.)
y P
 S HE V +F+G + E AKZCT ;M7KT, R E \L@ND7 -R0T, U FR(: (NA, U WOH7 KX] DU?)
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>footnote with standard placement and automatic numbering</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="footnote_placement" select="'standard'"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">Foo<dtb:noteref idref="#footnote1">a</dtb:noteref>	Bar<dtb:noteref idref="#footnote2">b</dtb:noteref> Baz</stub>
      </utfx:source>
      <utfx:expected>
 FOO'*#A
* 
  BAR'*#B
* 
  BAZ
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>footnote with end_vol placement</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="footnote_placement" select="'end_vol'"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">Hi Ha Ho <dtb:noteref idref="#footnote1"></dtb:noteref>
	<dtb:noteref idref="#footnote2"></dtb:noteref>
	<brl:volume brl:grade="2"/>Foo Bar Baz <dtb:noteref idref="#footnote3"></dtb:noteref>
	<dtb:noteref idref="#footnote4"></dtb:noteref>
	<brl:volume brl:grade="2"/>
	<dtb:note id="footnote1">
	  <dtb:p>This is a test</dtb:p>
	</dtb:note>
	<dtb:note id="footnote2">
	  <dtb:p>This is another test</dtb:p>
	</dtb:note>
	<dtb:note id="footnote3">
	  <dtb:p>This is a test</dtb:p>
	</dtb:note>
	<dtb:note id="footnote4">
	  <dtb:p>This is another test</dtb:p>
	</dtb:note></stub>
      </utfx:source>
      <utfx:expected>HI HA HO '*#A
* 
 '*#B
* 
 
y Notes

a 
 #A THIS IS 'A TE]
a 
 #B THIS IS +OTH7 TE]
y EndVol
y BrlVol
FOO BAR BAZ '*#C
* 
 '*#D
* 
 
y Notes

a 
 #C THIS IS 'A TE]
a 
 #D THIS IS +OTH7 TE]
y EndVol
y BrlVol
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

</utfx:tests>
