<?xml version='1.0' encoding='utf-8'?>

<!-- Copyright (C) 2010 Swiss Library for the Blind, Visually Impaired and Print Disabled -->

<!-- This file is part of LiblouisSaxonExtension. -->

<!-- LiblouisSaxonExtension is free software: you can redistribute it -->
<!-- and/or modify it under the terms of the GNU Lesser General Public -->
<!-- License as published by the Free Software Foundation, either -->
<!-- version 3 of the License, or (at your option) any later version. -->

<!-- This program is distributed in the hope that it will be useful, -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU -->
<!-- Lesser General Public License for more details. -->

<!-- You should have received a copy of the GNU Lesser General Public -->
<!-- License along with this program. If not, see -->
<!-- <http://www.gnu.org/licenses/>. -->

<!DOCTYPE utfx:tests PUBLIC "-//UTF-X//DTD utfx-tests 1.0//EN" "utfx_tests.dtd">
<utfx:tests xmlns:utfx="http://utfx.org/test-definition"
  xmlns:dtb="http://www.daisy.org/z3986/2005/dtbook/"
  xmlns:brl="http://www.daisy.org/z3986/2009/braille/">
  <utfx:stylesheet src="xsl/dtbook2sbsform.xsl"/>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- test getTable -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <utfx:test>
    <utfx:name>getTable for fr and contraction = 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:call-template name="getTable"/>
    <utfx:assert-equal>
      <utfx:source>
        <p xml:lang="fr"/>
      </utfx:source>
      <utfx:expected>Fr-Fr-g2.ctb</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>getTable for fr and contraction = 1</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:call-template name="getTable"/>
    <utfx:assert-equal>
      <utfx:source>
        <p xml:lang="fr"/>
      </utfx:source>
      <utfx:expected>fr-fr-g1.utb</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>getTable for de and contraction = 1</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:call-template name="getTable"/>
    <utfx:assert-equal>
      <utfx:source>
        <p xml:lang="de"/>
      </utfx:source>
      <utfx:expected>sbs.dis,sbs-de-core6.cti,sbs-de-accents.cti,sbs-special.cti,sbs-whitespace.mod,sbs-numsign.mod,sbs-litdigit-upper.mod,sbs-de-core.mod,sbs-de-g0-core.mod,sbs-de-g1-core.mod,sbs-de-hyph-none.mod,sbs-de-accents-ch.mod,sbs-special.mod</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>getTable for de and contraction = 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:call-template name="getTable"/>
    <utfx:assert-equal>
      <utfx:source>
        <p xml:lang="de"/>
      </utfx:source>
      <utfx:expected>sbs.dis,sbs-de-core6.cti,sbs-de-accents.cti,sbs-special.cti,sbs-whitespace.mod,sbs-de-letsign.mod,sbs-numsign.mod,sbs-litdigit-upper.mod,sbs-de-core.mod,sbs-de-g2-core.mod,sbs-de-hyph-none.mod,sbs-de-accents-ch.mod,sbs-special.mod</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>getTable for de-1901 and contraction = 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:call-template name="getTable"/>
    <utfx:assert-equal>
      <utfx:source>
        <p xml:lang="de-1901"/>
      </utfx:source>
      <utfx:expected>sbs.dis,sbs-de-core6.cti,sbs-de-accents.cti,sbs-special.cti,sbs-whitespace.mod,sbs-de-letsign.mod,sbs-numsign.mod,sbs-litdigit-upper.mod,sbs-de-core.mod,sbs-de-g2-core.mod,sbs-de-hyph-none.mod,sbs-de-accents-ch.mod,sbs-special.mod</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>getTable for de-1901 and contraction = 2 with hyphenation</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="hyphenation" select="true()"/>
    </utfx:stylesheet-params>
    <utfx:call-template name="getTable"/>
    <utfx:assert-equal>
      <utfx:source>
        <p xml:lang="de-1901"/>
      </utfx:source>
      <utfx:expected>sbs.dis,sbs-de-core6.cti,sbs-de-accents.cti,sbs-special.cti,sbs-whitespace.mod,sbs-de-letsign.mod,sbs-numsign.mod,sbs-litdigit-upper.mod,sbs-de-core.mod,sbs-de-g2-white.mod,sbs-de-g2-core.mod,sbs-de-hyph-old.mod,sbs-de-accents-ch.mod,sbs-special.mod</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>getTable for de and contraction = 1 and accents reduced</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:call-template name="getTable"/>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:span brl:accents="reduced" xml:lang="de"/>
      </utfx:source>
      <utfx:expected>sbs.dis,sbs-de-core6.cti,sbs-de-accents.cti,sbs-special.cti,sbs-whitespace.mod,sbs-numsign.mod,sbs-litdigit-upper.mod,sbs-de-core.mod,sbs-de-g0-core.mod,sbs-de-g1-core.mod,sbs-de-hyph-none.mod,sbs-de-accents-reduced.mod,sbs-special.mod</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- tests for specific constructs in the text -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <utfx:test>
    <utfx:name>test for !«</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»Ich bin Bergfahrer!«</stub>
      </utfx:source>
      <utfx:expected>(# B* B7G,R7+)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for !</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">And we look farther on!</stub>
      </utfx:source>
      <utfx:expected>+D WE LOOK F)TH7 ON+</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for <em>Italy</em></utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>Italy</dtb:em> stands the other side!</stub>
      </utfx:source>
      <utfx:expected>_IT:'Y ,]S THE OTH7 SIDE+</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for <em>Italy</em></utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Forever intervene!</stub>
      </utfx:source>
      <utfx:expected>F?EV7 *T7VCE+</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>&lt;em&gt; with previous text node ending in word</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="0"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
	  <dtb:line>foo</dtb:line>
	  <dtb:line><dtb:em>bar</dtb:em></dtb:line>
	</stub>
      </utfx:source>
      <utfx:expected>
y LINEb
 FOO
y LINEe
 
y LINEb
 _BAR
y LINEe
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for stick!!!«</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»Sun-block on a stick!!!«</stub>
      </utfx:source>
      <utfx:expected>(S/-mBLO$ ON 'A ]I$+++)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for und/oder</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Substanz und/oder deren</stub>
      </utfx:source>
      <utfx:expected>SUB]+Z U!,O D7C</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for <abbr>AM</abbr></utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:abbr>AM</dtb:abbr>- und der <dtb:abbr>FM</dtb:abbr>-Skala,</stub>
      </utfx:source>
      <utfx:expected>>AM- U R >FM-mSK:A,</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for em with subelements (http://redmine.sbszh.ch/issues/show/816) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="0"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:em><dtb:abbr>US</dtb:abbr>-Justizministerium</dtb:em>
        </stub>
      </utfx:source>
      <utfx:expected>__>US-mJUSTIZMINISTERIUM'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test for whitespace swallowed with adjacing inlines (http://redmine.sbszh.ch/issues/show/818) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de"><dtb:em>Mein Mann.</dtb:em> <brl:v-form>Ihr</brl:v-form></stub>
      </utfx:source>
      <utfx:expected>__M6 MN.'. $I</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Swallow white space whith embed new lines 1</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de">Gedanken – Strich      —</stub>
      </utfx:source>
      <utfx:expected>&amp;DKC'- ]R#'-</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Swallow white space whith embed new lines 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de">Gedanken
— Strich</stub>
      </utfx:source>
      <utfx:expected>&amp;DKC'- ]R#</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Swallow white space whith embed new lines 3</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de">Gedanken
  — Strich</stub>
      </utfx:source>
      <utfx:expected>&amp;DKC'- ]R#</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Swallow white space whith embed new lines 4</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de">Gedanken
                         —         Strich</stub>
      </utfx:source>
      <utfx:expected>&amp;DKC'- ]R#</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 1 for brl:num role="measure", wenn Zeilenumbruch zwischen Zahl und Einheit steht (http://redmine.sbszh.ch/issues/show/898) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <brl:num role="measure">24 mm</brl:num>
        </stub>
      </utfx:source>
      <utfx:expected>#BD'MM</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 2 for brl:num role="measure", wenn Zeilenumbruch zwischen Zahl und Einheit steht (http://redmine.sbszh.ch/issues/show/898) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <brl:num role="measure">24 
mm</brl:num>
        </stub>
      </utfx:source>
      <utfx:expected>#BD'MM</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 3 for wenn Zeilenumbruch zwischen Zahl und Einheit steht sollte Leerzeichen getilgt werden (http://redmine.sbszh.ch/issues/show/898) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:abbr>Nr. 
25</dtb:abbr>
        </stub>
      </utfx:source>
      <utfx:expected>NR.#BE</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 1 for brl:homograph (http://redmine.sbszh.ch/issues/show/925) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Iron <brl:homograph>M<brl:separator/>an</brl:homograph></stub>
      </utfx:source>
      <utfx:expected>IRON MAN</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 2 for brl:homograph (http://redmine.sbszh.ch/issues/show/925) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Iron <brl:homograph>Ma<brl:separator/>n</brl:homograph>
        </stub>
      </utfx:source>
      <utfx:expected>IRON MAN</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test für Einzelbuchstaben mit Punkt</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">A. B. C. D. E. F. G. H. I. J.</stub>
      </utfx:source>
      <utfx:expected>A. B. 'C. D. E. F. G. H. I. J.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 2 for Apostroph (pt. 6) vor Einzelbuchstaben mit Punkt innerhalb abbr (http://redmine.sbszh.ch/issues/show/927) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:abbr>A. B. D. E. F. G. H. I. J.</dtb:abbr>
        </stub>
      </utfx:source>
      <utfx:expected>A.B.D.E.F.G.H.I.J.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>test 2 for Apostroph (pt. 6) erscheint zweimal bei Apostroph + Einzelbuchstabe (http://redmine.sbszh.ch/issues/show/929) </utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">wie geht's</stub>
      </utfx:source>
      <utfx:expected>2 G=T'S</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>&lt;em&gt; innerhalb Anführungszeichen liefern falsches Resultat (http://redmine.sbszh.ch/issues/show/1004)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»<dtb:em>Test</dtb:em>«</stub>
      </utfx:source>
      <utfx:expected>(_TE])</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Problem bei Schrägstrich: Kürzungen (http://redmine.sbszh.ch/issues/show/1005)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Produktion/Test</stub>
      </utfx:source>
      <utfx:expected>QDUKTJ!,TE]</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Kursive/Fette Anführungszeichen bei brl:render="ignore" (http://redmine.sbszh.ch/issues/show/1006)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">»<dtb:em brl:render="ignore">Test</dtb:em>«-Beispiel</stub>
      </utfx:source>
      <utfx:expected>(TE])-m,B,0</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Kursive/Fette Anführungszeichen bei brl:render="ignore" (http://redmine.sbszh.ch/issues/show/1006)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em brl:render="ignore">»Test«</dtb:em>-Beispiel</stub>
      </utfx:source>
      <utfx:expected>(TE])-m,B,0</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Kursive/Fette Anführungszeichen bei brl:render="ignore" (http://redmine.sbszh.ch/issues/show/1006)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">›<dtb:em brl:render="ignore">Test</dtb:em>‹-Beispiel</stub>
      </utfx:source>
      <utfx:expected>'(TE]')-m,B,0</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Kursive/Fette Anführungszeichen bei brl:render="ignore" (http://redmine.sbszh.ch/issues/show/1006)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em brl:render="ignore">›Test‹</dtb:em>-Beispiel</stub>
      </utfx:source>
      <utfx:expected>'(TE]')-m,B,0</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>"ich" innerhalb em vor Komma (http://redmine.sbszh.ch/issues/show/944)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>ich</dtb:em>, </stub>
      </utfx:source>
      <utfx:expected>_I4,</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>"ich" innerhalb em vor Klammer (http://redmine.sbszh.ch/issues/show/944)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>ich</dtb:em>) </stub>
      </utfx:source>
      <utfx:expected>_I4=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>"ich" innerhalb em vor Klammer (http://redmine.sbszh.ch/issues/show/944)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>(ich</dtb:em>) </stub>
      </utfx:source>
      <utfx:expected>_=I4=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>"mich" innerhalb em vor Klammer (http://redmine.sbszh.ch/issues/show/944)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>mich</dtb:em>) </stub>
      </utfx:source>
      <utfx:expected>_M#=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Single word mixed emphasis (em before) (http://redmine.sbszh.ch/issues/show/1007)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>Menschen</dtb:em>versuch</stub>
      </utfx:source>
      <utfx:expected>_MC5C'.V7SU4</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Single word mixed emphasis (em after)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Liebe<dtb:em>gang</dtb:em></stub>
      </utfx:source>
      <utfx:expected>L0;'_G+G</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Single word mixed emphasis (em inside)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Liebe<dtb:em>Menschen</dtb:em>versuch</stub>
      </utfx:source>
      <utfx:expected>L0;'_MC5C'.V7SU4</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Einzelbuchstaben mit Akzenten erhalten fälschlicherweise einen Pt.6 (http://redmine.sbszh.ch/issues/show/1010)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">à la carte</stub>
      </utfx:source>
      <utfx:expected>"[ LA 'C)(</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Leerschläge vor und nach Schrägstrich werden getilgt (http://redmine.sbszh.ch/issues/show/1011)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">wort / wort</stub>
      </utfx:source>
      <utfx:expected>W?T !, W?T</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Falsches Resultat bei gemischtem Bruch, wenn Zeilenumbruch vorkommt (http://redmine.sbszh.ch/issues/show/1065)</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:space="preserve" xml:lang="de"><brl:num role="mixed">4
                1/2</brl:num></stub>
      </utfx:source>
      <utfx:expected>#D#A;</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Check if unicode chars are eaten by liblouis</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source><stub xml:lang="de">&#x255E;</stub></utfx:source>
      <utfx:expected>'_</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Check if unicode chars are eaten by liblouis</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source><stub xml:lang="de">&#x2561;</stub></utfx:source>
      <utfx:expected>'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Quotes w/o context 1</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"> (&#x00BB;<dtb:abbr>Bsp.</dtb:abbr>!&#x00AB;</stub>
      </utfx:source>
      <utfx:expected>=(BSP.+)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Quotes w/o context 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"> (&#x00AB;<dtb:abbr>Bsp.</dtb:abbr>!&#x00BB;</stub>
      </utfx:source>
      <utfx:expected>=(BSP.+)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Quotes w/o context 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"> (&#x00AB;<dtb:abbr>Bsp.</dtb:abbr>!&#x00BB;</stub>
      </utfx:source>
      <utfx:expected>=(BSP.+)</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Quotes with phone number</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"><brl:num role="phone">079 160 22 22</brl:num>&#x00BB;</stub>
      </utfx:source>
      <utfx:expected>#JGI.AFJ.BB.BB')</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Many quoted paras</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">
	  <dtb:p>«Sag mal, bist du Kommunist?»</dtb:p>
	  <dtb:p>«Nein, und schon gar nicht in sowjetischem Sinn.»</dtb:p>
	<dtb:p>«Du <dtb:em>bist</dtb:em></dtb:p>
	</stub>
      </utfx:source>
      <utfx:expected>
y P
 (SG MAL, B] DU KX/I]?(
y P
 (N6, U 5 GAR N * SOWJETI5[ S*N.)
y P
 (DU _B] 
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Many quoted paras 2</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">
	  <dtb:p>«Okay. Aber ich würde es auch gar nicht wissen; bin erst ein paar Jahre in den <dtb:abbr>USA</dtb:abbr>.»</dtb:p>
	  <dtb:p>Sie hatte von Anfang an den Akzent bemerkt, der den Ausländer verriet, und fragte: «Na, und woher kommst du?»</dtb:p>
	</stub>
      </utfx:source>
      <utfx:expected>y P
 (OKA'Y. A # 8E % \ GAR N W^C; B* 7] 6 PAAR JRE * E &gt;USA.)
y P
 S HE V +F+G + E AKZCT ;M7KT, R E \L@ND7 -R0T, U FR(: (NA, U WOH7 KX] DU?)
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Many quoted paras 3</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">
	  <dtb:p>»Okay. Aber ich würde es auch gar nicht wissen; bin erst ein paar Jahre in den <dtb:abbr>USA</dtb:abbr>.«</dtb:p>
	  <dtb:p>Sie hatte von Anfang an den Akzent bemerkt, der den Ausländer verriet, und fragte: »Na, und woher kommst du?«</dtb:p>
	</stub>
      </utfx:source>
      <utfx:expected>y P
 (OKA'Y. A # 8E % \ GAR N W^C; B* 7] 6 PAAR JRE * E &gt;USA.)
y P
 S HE V +F+G + E AKZCT ;M7KT, R E \L@ND7 -R0T, U FR(: (NA, U WOH7 KX] DU?)
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>footnote with standard placement and automatic numbering</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="footnote_placement" select="'standard'"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">Foo<dtb:noteref idref="#footnote1">a</dtb:noteref>	Bar<dtb:noteref idref="#footnote2">b</dtb:noteref> Baz</stub>
      </utfx:source>
      <utfx:expected>
 FOO'*#A
* 
  BAR'*#B
* 
  BAZ
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>footnote with end_vol placement</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="footnote_placement" select="'end_vol'"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">Hi Ha Ho <dtb:noteref idref="#footnote1"></dtb:noteref>
	<dtb:noteref idref="#footnote2"></dtb:noteref>
	<brl:volume brl:grade="2"/>Foo Bar Baz <dtb:noteref idref="#footnote3"></dtb:noteref>
	<dtb:noteref idref="#footnote4"></dtb:noteref>
	<brl:volume brl:grade="2"/>
	<dtb:note id="footnote1">
	  <dtb:p>This is a test</dtb:p>
	</dtb:note>
	<dtb:note id="footnote2">
	  <dtb:p>This is another test</dtb:p>
	</dtb:note>
	<dtb:note id="footnote3">
	  <dtb:p>This is a test</dtb:p>
	</dtb:note>
	<dtb:note id="footnote4">
	  <dtb:p>This is another test</dtb:p>
	</dtb:note></stub>
      </utfx:source>
      <utfx:expected>HI HA HO '*#A
* 
 '*#B
* 
 
y Notes

a 
 #A THIS IS 'A TE]
a 
 #B THIS IS +OTH7 TE]
y EndVol
y BrlVol
FOO BAR BAZ '*#C
* 
 '*#D
* 
 
y Notes

a 
 #C THIS IS 'A TE]
a 
 #D THIS IS +OTH7 TE]
y EndVol
y BrlVol
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <!-- Element tests -->
  <utfx:test>
    <utfx:name>Translation of h1</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h1 xml:lang="de">foo</dtb:h1>
      </utfx:source>
      <utfx:expected>y H1
 FOO</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h1 with with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h1 xml:lang="de" brl:class="foo">foo</dtb:h1>
      </utfx:source>
      <utfx:expected>y H1_foo
 FOO</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h2</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h2 xml:lang="de">foo</dtb:h2>
      </utfx:source>
      <utfx:expected>y H2
 FOO</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h2 with with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:h2 xml:lang="de" brl:class="foo">foo</dtb:h2>
      </utfx:source>
      <utfx:expected>y H2_foo
 FOO</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of p</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:p xml:lang="de">foo</dtb:p>
      </utfx:source>
      <utfx:expected>y P
 FOO</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of h2 with with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:p xml:lang="de" brl:class="foo">foo</dtb:p>
      </utfx:source>
      <utfx:expected>y P_foo
 FOO</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of Blockquote</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:blockquote xml:lang="de"></dtb:blockquote>
      </utfx:source>
      <utfx:expected>
y BLQUOb

y BLQUOe
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of Blockquote with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:blockquote xml:lang="de" brl:class="foo"></dtb:blockquote>
      </utfx:source>
      <utfx:expected>
y BLQUOb_foo

y BLQUOe_foo
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of epigraph</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:epigraph xml:lang="de"></dtb:epigraph>
      </utfx:source>
      <utfx:expected>
y EPIGRb

y EPIGRe
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of epigraph with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:epigraph xml:lang="de" brl:class="foo"></dtb:epigraph>
      </utfx:source>
      <utfx:expected>
y EPIGRb_foo

y EPIGRe_foo
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of author</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:author xml:lang="de">Hans</dtb:author>
      </utfx:source>
      <utfx:expected>
y AUTHOR
 H+S
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of author with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:author xml:lang="de" brl:class="foo">Hans</dtb:author>
      </utfx:source>
      <utfx:expected>
y AUTHOR_foo
 H+S
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of byline</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:byline xml:lang="de">Hans</dtb:byline>
      </utfx:source>
      <utfx:expected>
y BYLINE
 H+S
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of byline with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:byline xml:lang="de" brl:class="foo">Hans</dtb:byline>
      </utfx:source>
      <utfx:expected>
y BYLINE_foo
 H+S
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of list</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:list xml:lang="de"></dtb:list>
      </utfx:source>
      <utfx:expected>
y PLISTb

y PLISTe

      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of list with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:list xml:lang="de" brl:class="foo"></dtb:list>
      </utfx:source>
      <utfx:expected>
y PLISTb_foo

y PLISTe_foo
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of li</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:li xml:lang="de"></dtb:li>
      </utfx:source>
      <utfx:expected>
y LI
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of li with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:li xml:lang="de" brl:class="foo"></dtb:li>
      </utfx:source>
      <utfx:expected>
y LI_foo

      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of poem</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:poem xml:lang="de"></dtb:poem>
      </utfx:source>
      <utfx:expected>
y POEMb

y POEMe
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of poem with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:poem xml:lang="de" brl:class="foo"></dtb:poem>
      </utfx:source>
      <utfx:expected>
y POEMb_foo

y POEMe_foo
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of linegroup</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:linegroup xml:lang="de"></dtb:linegroup>
      </utfx:source>
      <utfx:expected>
y LINEGRb
 
y LINEGRe
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of linegroup with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:linegroup xml:lang="de" brl:class="foo"></dtb:linegroup>
      </utfx:source>
      <utfx:expected>
y LINEGRb_foo
 
y LINEGRe_foo
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of line</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:line xml:lang="de"></dtb:line>
      </utfx:source>
      <utfx:expected>
y LINEb
 
y LINEe
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Translation of line with brl:class attr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:line xml:lang="de" brl:class="foo"></dtb:line>
      </utfx:source>
      <utfx:expected>
y LINEb_foo
 
y LINEe_foo
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Selection feature</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<brl:select xml:lang="de">
	  <brl:when-braille>
	    <brl:literal>Foo</brl:literal>
	  </brl:when-braille>
	  <brl:otherwise>Bar</brl:otherwise>
	</brl:select>
      </utfx:source>
      <utfx:expected>Foo</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Selection feature with literals with grade attrs</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
	<brl:select xml:lang="de">
	  <brl:when-braille>
	    <brl:literal brl:grade="1">Foo</brl:literal>
	    <brl:literal brl:grade="2">Bar</brl:literal>
	  </brl:when-braille>
	  <brl:otherwise>Baz</brl:otherwise>
	</brl:select>
      </utfx:source>
      <utfx:expected>Bar</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Selection feature with mixed literals and text nodes</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<brl:select xml:lang="de">
	  <brl:when-braille>Foo <brl:literal>Bar</brl:literal></brl:when-braille>
	  <brl:otherwise>Baz</brl:otherwise>
	</brl:select>
      </utfx:source>
      <utfx:expected>FOO Bar</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>div element</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<dtb:div brl:class="foo" xml:lang="de">
	</dtb:div>
      </utfx:source>
      <utfx:expected>
y DIVb_foo

y DIVe_foo
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Datum: Tag Monat Jahr</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:date value="2011-01-01">1.1.2011</brl:date></stub>
      </utfx:source>
      <utfx:expected>#,A#BJAA</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Datum: Tag Monat</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:date value="--01-01">1.1.</brl:date></stub>
      </utfx:source>
      <utfx:expected>#,A</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Time</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:time value="10:30">10:30</brl:time></stub>
      </utfx:source>
      <utfx:expected>#AJ.CJ</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Time with leading zeros</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:time value="10:05">10:05</brl:time></stub>
      </utfx:source>
      <utfx:expected>#AJ.JE</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Span inside span</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"><brl:span brl:accents="reduced">Bèr</brl:span> <dtb:span xml:lang="de" brl:grade="2">Bèr <brl:span brl:accents="reduced">Bèr</brl:span></dtb:span></stub>
      </utfx:source>
      <utfx:expected>B"ER -.B"^R B"ER'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Span inside span 2</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de">
	  <dtb:p><dtb:span brl:accents="reduced">René</dtb:span></dtb:p>
	  <dtb:p><dtb:span brl:accents="reduced">René René</dtb:span></dtb:p>
          <dtb:p>Kurz <dtb:span brl:grade="1" brl:accents="reduced">René René</dtb:span> René</dtb:p>
	  <dtb:p><dtb:span brl:grade="1">René <dtb:span brl:accents="reduced">René</dtb:span> René</dtb:span></dtb:p>
	</stub>
      </utfx:source>
      <utfx:expected>y P
 RC"E
y P
 RC"E RC"E
y P
 KZ -.REN"E REN"E'. RC"%
y P
 -.REN"% REN"E REN"%'.
</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Span inside em</utfx:name>
    <utfx:assert-equal>
      <utfx:source>
	<stub xml:lang="de"><dtb:em>Hallo <dtb:span brl:accents="reduced">René</dtb:span></dtb:em></stub>
      </utfx:source>
      <utfx:expected>__HAQO RC"E'.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Downgrading</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:p>Kurzschrift schrift schrift <dtb:span brl:grade="1">Vollschrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span brl:grade="0">Basisschrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span brl:grade="1">Vollschrift schrift schrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span brl:grade="0">Basisschrift schrift schrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span brl:grade="1">Vollschrift/Vollschrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span brl:grade="0">Basisschrift/Basisschrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span brl:grade="1">Vollschrift-Vollschrift</dtb:span> kurz kurz kurz</dtb:p>
          <dtb:p>Kurzschrift schrift schrift <dtb:span brl:grade="0">Basisschrift-Basisschrift</dtb:span> kurz kurz kurz</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>y P
 KZ5T 5T 5T '.VOLL5RIFT KZ KZ KZ
y P
 KZ5T 5T 5T '.BASISSCHRIFT KZ KZ KZ
y P
 KZ5T 5T 5T -.VOLL5RIFT 5RIFT 5RIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.BASISSCHRIFT SCHRIFT SCHRIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.VOLL5RIFT!,VOLL5RIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.BASISSCHRIFT!,BASISSCHRIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.VOLL5RIFT-mVOLL5RIFT'. KZ KZ KZ
y P
 KZ5T 5T 5T -.BASISSCHRIFT-mBASISSCHRIFT'. KZ KZ KZ</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
 
  <utfx:test>
    <utfx:name>Wort "ich" am Ende von Inlines mit nachfolgendem Satzzeichen</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>Ich</dtb:em>, <dtb:strong>ich</dtb:strong>; <brl:emph>ich</brl:emph>: <dtb:em>ich</dtb:em>? <dtb:strong>ich</dtb:strong>! (<brl:emph>ich</brl:emph>) «<dtb:strong>ich</dtb:strong>» »<brl:emph>ich</brl:emph>«.</stub>
      </utfx:source>
      <utfx:expected>_I4, _I4; _I4: _I4? _I4+ =_I4= (_I4) (_I4).</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Emphasis: Wortgrenzenerkennung bei "-" und "/"</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><dtb:em>Wort</dtb:em>, <dtb:strong>Wort</dtb:strong>, <brl:emph>Wort</brl:emph>. <dtb:em>Zwei Wörter</dtb:em>, <dtb:strong>eins/zwei</dtb:strong>, <brl:emph>eins-zwei</brl:emph>.</stub>
      </utfx:source>
      <utfx:expected>_W?T, _W?T, _W?T. __ZW3 W9RT7'., __6S!,ZW3'., __6S-mZW3'..</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Separator ist keine Wortgrenze</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:homograph>testor<brl:separator/>test</brl:homograph></stub>
      </utfx:source>
      <utfx:expected>TE]?(]</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Braille-Literal</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Musik <brl:select><brl:when-braille><brl:literal>@#Lv._@&gt;&amp;2K</brl:literal></brl:when-braille> 
            <brl:otherwise>[Note E im Bassschlüssel]</brl:otherwise></brl:select> ist doch ganz einfach.</stub>
      </utfx:source>
      <utfx:expected>MK @#Lv._@&gt;&amp;2K ] D4 GZ 6F&lt;.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Römische Zahlen</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Henry <brl:num role="roman">IV</brl:num>.
          Auf Seite <brl:num role="roman">iii</brl:num> beginnt das Vorwort.</stub>
      </utfx:source>
      <utfx:expected>HCR'Y >IV. 1 S3( 'III ;G*NT D ,?W?T.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Ordnungszahlen</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="downshift_ordinals" select="true()"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Am <brl:num role="ordinal">5.</brl:num> Tag geschah es zum <brl:num role="ordinal">1004.</brl:num>
          (oder <brl:num role="ordinal">1005.</brl:num>) Mal.</stub>
      </utfx:source>
      <utfx:expected>AM #? TAG &amp;5AH % ZM #,))/ =O #,))?'= MAL.</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Telefonnummern</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">Telefon <brl:num role="phone">041 / 123 45 67</brl:num>? Telefon <brl:num role="phone">041/123'45'67</brl:num>!</stub>
      </utfx:source>
      <utfx:expected>TYEFON #JDA.ABC.DE.FG'? TYEFON #JDA.ABC.DE.FG'+</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Brüche</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de"><brl:num role="fraction">1/3</brl:num>? <brl:num role="fraction">2/5</brl:num>, (<brl:num role="fraction">13/15</brl:num>) <brl:num role="mixed">3 2/5</brl:num>? <brl:num role="mixed">1 12/19</brl:num>, (<brl:num role="mixed">3 24/25</brl:num>)</stub>
      </utfx:source>
      <utfx:expected>#A:'? #B?', =#AC,?'= #C#B?'? #A#AB,*', =#C#BD;?'=</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>ISBN</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <dtb:p xml:lang="de"><dtb:abbr>ISBN</dtb:abbr> <brl:num role="isbn">978-3-86971-001-3</brl:num> <dtb:abbr>ISBN</dtb:abbr> <brl:num role="isbn">978-3-86971-001-X</brl:num> <dtb:abbr>ISBN</dtb:abbr> <brl:num role="isbn">978 3 86971 001 3</brl:num></dtb:p>
      </utfx:source>
      <utfx:expected>y P
 &gt;ISBN #IGH.C.HFIGA.JJA.C &gt;ISBN #IGH.C.HFIGA.JJA-m&gt;X &gt;ISBN #IGH.C.HFIGA.JJA.C</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Running Line Kurzschrift</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="footer_level" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:level2>
            <dtb:h2>Running <brl:running-line brl:grade="1">Index</brl:running-line><brl:running-line brl:grade="2">Laufindex</brl:running-line>line</dtb:h2>
            <dtb:p>Geklappert?</dtb:p> 
          </dtb:level2>
        </stub>
      </utfx:source>
      <utfx:expected>y LEVEL2b
.xNOPAGENUM

y H2
 R/N*G L*E
~L1F*DE'X

y P
 &amp;KLAPP7T?
y LEVEL2e</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Running Line Vollschrift</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
      <utfx:with-param name="footer_level" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
          <dtb:level2>
            <dtb:h2>Running <brl:running-line brl:grade="1">Index</brl:running-line><brl:running-line brl:grade="2">Laufindex</brl:running-line>line</dtb:h2>
	    <dtb:p>Geklappert?</dtb:p> 
          </dtb:level2>
        </stub>
      </utfx:source>
      <utfx:expected>y LEVEL2b
.xNOPAGENUM

y H2
 RUNNING LINE
~INDEX

y P
 GEKLAPPERT?
y LEVEL2e</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>

  <utfx:test>
    <utfx:name>Inhaltsverzeichnis</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="toc_level" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">        
          <dtb:level2>
            <dtb:h2>Inhaltsverzeichnis<brl:toc-line>Etwas ganz anderes</brl:toc-line></dtb:h2>
            <dtb:p>Geklappert?</dtb:p> 
          </dtb:level2>
        </stub>
      </utfx:source>
      <utfx:expected>y LEVEL2b
.xNOPAGENUM

y H2
 *H:TSV7Z34X
HTW GZ ,7%

y P
 &amp;KLAPP7T?
y LEVEL2e</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>Nodes starting and ending with punctuation</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
      <utfx:with-param name="toc_level" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">        
            <dtb:p>Was?</dtb:p> 
            <dtb:p>Als ich ...</dtb:p> 
            <dtb:p>Nun ...</dtb:p> 
        </stub>
      </utfx:source>
      <utfx:expected>y P
 W?
y P
 3 # ...
y P
 N/ ...</utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und pagnum</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">        
	  <dtb:p>... bla bla.</dtb:p>
	  <brl:volume brl:grade='2'/>
	  <dtb:pagenum>75</dtb:pagenum>
	  <dtb:p>Bla bla ...</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>y P
 ... BLA BLA.
y EndVol
p

j 75
y BrlVol

y P
 BLA BLA ...
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und pagnum with other contraction</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">        
	  <dtb:p>... bla bla.</dtb:p>
	  <brl:volume brl:grade='2'/>
	  <dtb:pagenum>75</dtb:pagenum>
	  <dtb:p>Bla bla ...</dtb:p>
        </stub>
      </utfx:source>
      <utfx:expected>y P
 ... BLA BLA.
j 75
 
y P
 BLA BLA ...
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und levelN/pagnum</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="2"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
	  <dtb:level1>
	    <dtb:p>... bla bla.</dtb:p>
	  </dtb:level1>
	  <brl:volume brl:grade="2"/>
	  <dtb:level1>
	    <dtb:pagenum>75</dtb:pagenum>
	    <dtb:h1>Titel</dtb:h1>
	    <dtb:p>Bla bla ...</dtb:p>
	  </dtb:level1>
        </stub>
      </utfx:source>
      <utfx:expected>y LEVEL1b
.xNOPAGENUM

y P
 ... BLA BLA.
y LEVEL1e

y EndVol
p

j 75
y BrlVol

y LEVEL1b
.xNOPAGENUM

y H1
 TITY

y P
 BLA BLA ...
y LEVEL1e
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
  
  <utfx:test>
    <utfx:name>brl:volume und levelN/pagnum with other contraction</utfx:name>
    <utfx:stylesheet-params>
      <utfx:with-param name="contraction" select="1"/>
    </utfx:stylesheet-params>
    <utfx:assert-equal>
      <utfx:source>
        <stub xml:lang="de">
	  <dtb:level1>
	    <dtb:p>... bla bla.</dtb:p>
	  </dtb:level1>
	  <brl:volume brl:grade="2"/>
	  <dtb:level1>
	    <dtb:pagenum>75</dtb:pagenum>
	    <dtb:h1>Titel</dtb:h1>
	    <dtb:p>Bla bla ...</dtb:p>
	  </dtb:level1>
        </stub>
      </utfx:source>
      <utfx:expected>y LEVEL1b
.xNOPAGENUM

y P
 ... BLA BLA.
y LEVEL1e

y LEVEL1b
.xNOPAGENUM

j 75
 
y H1
 TITEL

y P
 BLA BLA ...
y LEVEL1e
      </utfx:expected>
    </utfx:assert-equal>
  </utfx:test>
</utfx:tests>
